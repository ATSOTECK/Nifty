/-
 | Nifty - Nifty Programming Language
 | Copyright (c) 2022 - 2023 Skyler Burwell
 |
 | This software is provided 'as-is', without any express or implied
 | warranty. In no event will the authors be held liable for any damages
 | arising from the use of this software.
 |
 | Permission is granted to anyone to use this software for any purpose,
 | including commercial applications, and to alter it and redistribute it
 | freely, subject to the following restrictions:
 |
 | 1. The origin of this software must not be misrepresented; you must not
 |    claim that you wrote the original software. If you use this software
 |    in a product, an acknowledgment in the product documentation would be
 |    appreciated but is not required.
 | 2. Altered source versions must be plainly marked as such, and must not be
 |    misrepresented as being the original software.
 | 3. This notice may not be removed or altered from any source distribution.
 |
-/

package optional

type Optional<T> struct {
    _value: T = undefined
    _hasValue: bool
}

impl Optional<T>

md new(empty: bool, value: T = undefined) {
    if (empty) {
        return
    }
    
    _value = value
    _hasValue = true
}

md hasValue(): bool {
    return _hasValue
}

md isEmpty(): bool {
    return !_hasValue
}

md clear() {
    _hasValue = false
    // TODO: Check type and delete _value?
}

md set(value: T) {
    _value = value
    _hasValue = true
}

md valueElse(other: T): T {
    if (!_hasValue) {
        return other
    }
    
    return _value
}

md valueElseFn(other: fn(): T): T {
    if (!_hasValue) {
        return other()
    }
    
    return _value
}

md valueElseDefault(): T {
    if (!_hasValue) {
        return T()
    }
    
    return _value
}

md valueElsePanic(msg: string): T {
    if (!_hasValue) {
        panic(msg)
    }
    
    return _value
}

endimpl
