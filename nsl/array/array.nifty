/-
 | Nifty - Nifty Programming Language
 | Copyright (c) 2024 Skyler Burwell
 |
 | This software is provided 'as-is', without any express or implied
 | warranty. In no event will the authors be held liable for any damages
 | arising from the use of this software.
 |
 | Permission is granted to anyone to use this software for any purpose,
 | including commercial applications, and to alter it and redistribute it
 | freely, subject to the following restrictions:
 |
 | 1. The origin of this software must not be misrepresented; you must not
 |    claim that you wrote the original software. If you use this software
 |    in a product, an acknowledgment in the product documentation would be
 |    appreciated but is not required.
 | 2. Altered source versions must be plainly marked as such, and must not be
 |    misrepresented as being the original software.
 | 3. This notice may not be removed or altered from any source distribution.
 |
 -/

package array

use <iter>
use <mem>

type Array<T> struct {
    _data: [^]T
    _len: int
    _cap: int
}

fn newArray<T>(cap := 0): Array<T> {
    return Array{
        _data: mem::alloc(size_of(T) * cap)
        _len: 0,
        _cap: cap
    }
}

impl Array<T> does iter::Iterable<T>

md len(): int {
    return _len
}

md cap(): int {
    return _cap
}

md push(item: T) {
    ++_len
}

md pop(): T {
    item := _data[_len - 1]
    --_len
    
    return item
}

md get(idx: int): T {
    return _data[idx]
}

md set(idx: int, item: T) {
    _data[idx] = item
}

md fill(item: T) {
    for (i := 0; i < _cap; ++i) {
        _data[i] = item
    }
    
    _len = _cap
}

md _mapNoIdx(callback: fn(T): T): []T {
    //    
}

md _mapIdx(callback: fn(T, int): T): []T {
    //
}

md map overloads{_mapNoIdx, _mapIdx}

endimpl
