/-
 | Nifty - Nifty Programming Language
 | Copyright (c) 2022 - 2023 Skyler Burwell
 |
 | This software is provided 'as-is', without any express or implied
 | warranty. In no event will the authors be held liable for any damages
 | arising from the use of this software.
 |
 | Permission is granted to anyone to use this software for any purpose,
 | including commercial applications, and to alter it and redistribute it
 | freely, subject to the following restrictions:
 |
 | 1. The origin of this software must not be misrepresented; you must not
 |    claim that you wrote the original software. If you use this software
 |    in a product, an acknowledgment in the product documentation would be
 |    appreciated but is not required.
 | 2. Altered source versions must be plainly marked as such, and must not be
 |    misrepresented as being the original software.
 | 3. This notice may not be removed or altered from any source distribution.
 |
-/

package error

use <fmt>

type Error struct {
    _msg: string
    _code: int
    _hasError: bool
}

impl Error does Errorable

md new(message := "", code := 0) {
    if (message.isEmpty() && code == 0) {
        return
    }
    
    _msg = message
    _code = code
    _hasError = true
}

md msg(): string {
    if (_msg.isEmpty() && _code != 0) {
        return fmt::sprintf("{}", _code)
    }
    
    return _msg;
}
 
md code(): int {
    if (!_msg.isEmpty() && _code == 0) {
        return -1;
    }
    
    return _code;
}

md occured(): bool {
    return _hasError
}

endimpl
