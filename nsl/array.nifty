package array

type Array<T> struct {
    _data: []T
    _len: int
    _cap: int
}

impl Array<T>

md new(length := 0, capacity := 0) {
    _len = length
    _cap = capacity
    
    if (!_len && !_cap) {
        _data = make([]T)
    } else if (_len && !_cap) {
        _data = make([]T, _len)
        _cap = _len
    } else {
        _data = make([]T, _len, _cap)
    }
}

md len() {
    return _len
}

md push(item: T) {
    append(_data, item)
    ++_len
}

md pop(): T {
    item := _data[_len - 1]
    --_len
    
    return item
}

md get(idx: int): T {
    return _data[idx]
}

md set(idx: int, item: T) {
    _data[idx] = item
}

md fill(item: T) {
    for (i := 0; i < _cap; ++i) {
        _data[i] = item
    }
    
    _len = _cap
}

endimpl
