/*
 * Nifty - Nifty Programming Language
 * Copyright (c) 2022 - 2023 Skyler Burwell
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 */

#include <iostream>

#include "common.hpp"
#include "lexer.hpp"
#include "parser.hpp"

#include <filesystem>
#include <fstream>

#define hlp(x) db(std::setfill('-') << std::left << std::setw(32) << std::string("    ") + x)
#define hlp2(x) db(std::setfill(' ') << std::left << std::setw(32) << std::string("    ") + x)

void unknownCmd(const String &cmd) {
    if (!cmd.empty()) {
        db("Unknown command '" << cmd << "'.");
        db("See 'nifty help' for a list of valid commands.");
    }
}

void printHelp(const String &cmd) {
    db("Nifty Programming Language");
    dbln

    if (cmd.empty()) {
        db("Usage: nifty command [arguments]");
        dbln
        db("Commands:");
        hlp("build, b: " << " Build the specified build file or target.");
        hlp("run, r: " << " Build and run the specified build file or target.");
        hlp("help, h: " << " Show this help information or information on the specified command.");
        hlp("new, n: " << " Create new Nifty project.");
        hlp("test, t: " << " Compile and run all functions with the test attribute in the specified build file or target.");
        hlp("docs, d: " << " Generate documentation from the specified build file or target.");
        hlp("version, v: " << " Prints Nifty version info.");
        dbln
        db("If no command is given Nifty will build from 'nifty.toml'");
    }

    if (cmd == "build" || cmd == "b") {
        db("Usage: nifty build [arguments]");
        hlp("build, b <string>: " << " Build the specified build file or target.");
        dbln
        db("Examples:");
        hlp("nifty build " << " Builds the default target in nifty.toml");
        hlp("nifty build filename.nifty " << " Builds filename.nifty");
        hlp("nifty build target " << " Builds target in nifty.toml");
        dbln
        db("Flags:");
        hlp("-name <string> " << " Set the name of the compiled executable. Overwrites what is in the build file.");
        hlp("-opt <string> " << " Set the optimization level. Valid options are: debug, size, fast");
        hlp2("" << " debug reduces compile times and is meant for debug builds. This is the default.");
        hlp2("" << " size optimizes for size rather than speed.");
        hlp2("" << " fast optimizes for speed.");
        hlp("-debug " << " Enable debug symbols.");
        hlp("-keep-tmp " << " Keeps all temporary files generated during the compile.");
        hlp("-emit-llvm " << " Emits the LLVM IR generated during the compile.");
        hlp("-no-color " << " Disable the use of colors in the error/warning messages.");
        hlp("-define <string> " << " Defines a macro that can be used in compilation. Can set optional value.");
        hlp2("" << " -define TRACE_EXECUTION");
        hlp2("" << " -define PRINT_DEPTH=3\tNote no spaces are allowed.");
        hlp("-error-on-warn " << " Treat all warnings as errors.");
        hlp("-no-warn " << " Disable all warnings.");
        hlp("-no-entry " << " Tells the compiler there is no default entry point.");
        return;
    }

    if (cmd == "help" || cmd == "h") {
        db("Please seek professional help.");
        return;
    }

    if (cmd == "new" || cmd == "n") {
        hlp("nifty new, n " << " Creates a new nifty project.");
        dbln
        db("Project Info:");
        hlp("Project name " << " Name of the project. May not contain whitespace.");
        hlp("Entry point " << " The file containing the default entry point. May not contain whitespace.");
        hlp("Author " << " Name of the person or organization developing the project. Optional.");
        hlp("License " << " The license for this project. A license.md file will be autogenerated. Optional");
        dbln
        db("Licences:");
        hlp("(SPDX short identifier) " << " (Description)");
        hlp("Apache-2.0 " << " Apache License, Version 2.0");
        hlp("BSD-3-Clause " << " The 3-Clause (New) BSD License also called Modified BSD License");
        hlp("BSD-2-Clause " << " The 2-Clause (Simplified) BSD License also called FreeBSD License");
        hlp("GPL-2.0 " << " GNU General Public License version 2");
        hlp("GPL-3.0-only " << " GNU General Public License version 3");
        hlp("LGPL-2.1 " << " GNU Lesser General Public License version 2.1");
        hlp("LGPL-3.0 " << " GNU Lesser General Public License version 3");
        hlp("MIT " << " The MIT License");
        hlp("MPL-2.0 " << " Mozilla Public License 2.0");
        hlp("CDDL-1.0 " << " Common Development and Distribution License 1.0");
        hlp("EPL-2.0 " << " Eclipse Public License version 2.0");
        hlp("Zlib " << " The zlib/libpng License (Zlib)");
        hlp("License identifiers are not case sensitive.");
        hlp("Another license can be used but you must provide it.");
        return;
    }

    if (cmd == "version" || cmd == "v") {
        db("Prints version info.");
        return;
    }

    if (cmd == "me") {
        db("I wish I could :(");
        return;
    }

    unknownCmd(cmd);
}

// TODO: Get build args.
void build(const char *arg) {
    String path;

    if (arg == nullptr) {
        path = NIFTY_BUILD_FILE;
    } else {
        path = arg;
    }

    Lexer lexer(path);
    Parser parser = Parser(&lexer);
    parser.parse();
}

int main(int argc, char **argv) {
    std::ifstream buildFile;
    buildFile.open(NIFTY_BUILD_FILE, std::ios_base::in);
    bool buildFileFound = buildFile.is_open();
    if (buildFileFound) {
        buildFile.close();
    }

    if (argc >= 2) {
        String cmd = argv[1];

        if (cmd == "help" || cmd == "-h") {
            argc == 3 ? printHelp(argv[2]) : printHelp("");
        } else if (cmd == "version" || cmd == "-v") {
            db(NIFTY_VERSION);
        } else if (cmd == "info" || cmd == "-i") {
            db("Nifty version " << NIFTY_VERSION << " built on " << NIFTY_DATE << ".");
        } else if (cmd == "build" || cmd == "-b") {
            build(argv[2]);
        } else if (cmd == "run" || cmd == "-r") {
            db("TODO");
        } else {
            unknownCmd(cmd);
        }
    } else {
        if (!buildFileFound) {
            db("No " << NIFTY_BUILD_FILE << " file found.");
            db("Run 'nifty help' for more info. Exiting.");
        } else {
            build(nullptr);
        }
    }

    return 0;
}
