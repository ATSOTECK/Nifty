package functions

using <fmt>
use <math.random>

fn addInt(x: int y: int): int {
    return x + y
}

fn addFloat(x, y: float): float {
    return x + y
}

fn addDouble(x := 0.d, y := 0.d): double {
    return x + y
}

fn addSaturatingInt(x: u8 = 10, y: u8 = 20): u8 {
    return x @+ y
}

fn add overloads {addInt, addFloat, addDouble, addSaturatingInt}

fn getRandomPos(w, h: f32): f32, f32 {
    x := random::float32Range(0, w)
    y := random::float32Range(0, h)
    return x, y
}

#[minArity(2)]
fn sum(nums: ..int): int {
    res := 0
    for (val n in nums) {
        res += n
    }
    
    return res
}

fn printArg(n: int) {
    // n = 12; // Uncomment and see what happens.
    /-
    x := &n;
    x^ = 12; // Uncomment and see what happens.
    -/
    
    // let n = 42; // Uncomment and see what happens.
    
    println(n)
}

// Specifying void is optional.
fn voidFn(): void {
    println("This is a void function.")
}

fn main() {
    let a: u8 = 20
    let b: u8 = 255
    println(add(a, b)) // Should print 255.
    println(addInt(2, 2))
    
    x, y := getRandomPos(100.f, 100.f)
    println("({}, {})", x, y)
    
    // sum(); // Uncomment this line to see what happens.
    theSum := sum(1, 2, 3, 4, 5, 6, 7, 8, 9)
    println(theSum)
    
    printArg(100)
    voidFn()
    
    printArgPtr := printArg
    printArgPtr(42)
    
    let printArgPtr2: fn(int)
    printArgPtr2 = printArg
    printArgPtr2(12)
}
