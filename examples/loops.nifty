/-
 | Nifty - Nifty Programming Language
 | Copyright (c) 2022 - 2023 Skyler Burwell
 |
 | This software is provided 'as-is', without any express or implied
 | warranty. In no event will the authors be held liable for any damages
 | arising from the use of this software.
 |
 | Permission is granted to anyone to use this software for any purpose,
 | including commercial applications, and to alter it and redistribute it
 | freely, subject to the following restrictions:
 |
 | 1. The origin of this software must not be misrepresented; you must not
 |    claim that you wrote the original software. If you use this software
 |    in a product, an acknowledgment in the product documentation would be
 |    appreciated but is not required.
 | 2. Altered source versions must be plainly marked as such, and must not be
 |    misrepresented as being the original software.
 | 3. This notice may not be removed or altered from any source distribution.
 |
-/

package loops;

using <fmt>

fn printALine() {
    println("----------")
}

fn main() {
    println("For loops!")
    
    for (let i = 0; i < 10; i += 1) {
        println(i)
    }
    
    printALine()
    
    for (i := 0; i < 10; ++i) {
        println(i)
    }
    
    printALine()
    
    for (0 ..< 10) {
        println("For loop!")
    }
    
    printALine()
    
    // With step 2.
    for (val i in 0 ..< 10; 2) {
        println(i)
    }
    
    printALine()
    
    // Nothing should happen here.
    for (val i in 10 ..= 0) {
        println(i)
    }
    
    for <(val i in 10 ..= 0) {
        println(i)
    }
    
    printALine()
    println("While loops!")
    
    x := 0
    while (x < 5) {
        println(x)
        x++
    }
    
    printALine()
    
    // Like do ... while
    #[atLeastOnce]
    while (x < 0) {
        println(x)
    }
    
    printALine();
    println("Unil loops!")
    
    until (x == 0) {
        println(x)
        x--
    }
    
    printALine()
    
    // Like do ... until
    #[atLeastOnce]
    until (x < 0) {
        println(x)
    }
}
