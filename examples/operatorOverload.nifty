/-
 | Nifty - Nifty Programming Language
 | Copyright (c) 2022 - 2023 Skyler Burwell
 |
 | This software is provided 'as-is', without any express or implied
 | warranty. In no event will the authors be held liable for any damages
 | arising from the use of this software.
 |
 | Permission is granted to anyone to use this software for any purpose,
 | including commercial applications, and to alter it and redistribute it
 | freely, subject to the following restrictions:
 |
 | 1. The origin of this software must not be misrepresented; you must not
 |    claim that you wrote the original software. If you use this software
 |    in a product, an acknowledgment in the product documentation would be
 |    appreciated but is not required.
 | 2. Altered source versions must be plainly marked as such, and must not be
 |    misrepresented as being the original software.
 | 3. This notice may not be removed or altered from any source distribution.
 |
-/

package operator_overload;

using "nsl.fmt";

// The following operators are overloadable:
// +, -, *, /, <<, >>, !, [], []=, [:], +=, -=, *=, /=, ==, !=, >, <, >=, <=, =, ++, --, in
// Unary +, -, and ++, -- are special cases.

type Point struct {x, y: f32;}

impl Point;

#[overloads("+=")]
md addEqInt(n: int) {
    x += n;
    y += n;
}

#[overloads("+=")]
md addEqOther(other: Point) {
    x += other.x;
    y += other.y;
}

#[overloads("+unary")]
md positive() {
    x = +x;
    y = +y;
}

#[overloads("-unary")]
md negate() {
    x = -x;
    y = -y;
}

#[overloads("++postfix")]
md postInc[p: Point](): Point {
    p.x++;
    p.y++;
    
    return p;
}

#[overloads("++prefix")]
md preInc[p: Point](): Point {
    ret := p;
    p.x++;
    p.y++;
    
    return ret;
}

endimpl;

fn main() {
    one := Point{10, 10}
    two := Point{20, 20}
    
    one += 5;
    tow += one;
    
    -one();
    two.negate();
    
    onePost := one++;
    onePre := ++one;
    
    println(one.x, one.y);
    println(onePost.x, onePost.y);
    println(onePre.x, onePre.y);
}
