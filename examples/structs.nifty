package structs

using <fmt>

// In the behavior/impl I'm using md instead of fn, this is short for method. This can only be used
// in behavior/impl. It is optional and fn can be used instead. The idea is it can tell a programmer
// they're in the middle of a behavior or impl without them having to scroll.

type Animal behavior {
    md speak() {
        println("Not implemented!")
    }
    
    eat()
    
    name: string
    weight: f32
}

type Cat struct {
    furColor: string
    _lives: int = 9
}

impl Cat does Animal

md speak() {
    println("{} says meow!", name)
}

md eat() {
    println("Eats cat food.")
}

md getLives(): int {
    return _lives
}

endimpl

type Dog struct {
    breed: string
}

impl Dog does Animal

md bark() {
    println("Woof!")
}

md eat() {
    println("Eats dog food.")
}

endimpl Dog // Optional struct name used here.

type Point struct {x, y: f32}

type Foo struct {
    _x: int
    _y: int
}

impl Foo

md add[foo: Foo](a, b: int) {
    foo._x += a
    foo._y += b
}

md sub[foo: ^Foo](a, b: int) {
    foo->_x -= a
    foo->_y -= b
}

md print() {
    println(_x, _y)
}

endimpl

fn main() {
    cat := Cat{name: "Mittens", weight: 12, furColor: "brown"}
    dog := Dog{name: "Fido", weight: 100, breed: "Golden"}
    
    cat.speak()
    dog.speak()
    
    cat.eat()
    dog.eat()
    
    // println(cat._lives) // Uncomment this and see what happens.
    println(cat.getLives())
    dog.bark()
    
    p := point{12.f, 42.f}
    println(p.x, p.y)
    
    p.x += 42
    p.y += 12
    println(p.x, p.y)
    
    let foo: Foo
    foo.add(12, 42)
    foo.sub(10, 92)
    foo.print()
}
