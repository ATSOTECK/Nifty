package variables

using <fmt>

fn returnsTwoVars(): int, int {
    return 12, 42
}

fn main() {
    let a: int = 12
    let b = 42 // int
    c := 19.f // float/f32
    
    // Runtime consts.
    val d: f64 = 100 //double/f64
    val e = returnsDouble() // double/f64
    f ::= returns20() // int
    
    // Compiletime consts.
    const g: int = 100
    const h = 42
    i ::= 0
    
    let j: int // Deafults to 0.
    let k: int = undefined // Explicitly uninitialized.
    l := k // Valid, but undefined behavior. May warn.
    
    // Immutables must have their values set.
    // val m: int // Invalid.
    // val n: int  = undefined // Invalid.
    // o ::= undefined // Invalid.
    
    // Variables must have a type.
    // p := undefined // Invalid.
    
    // Variables can not later be set to undefined.
    // a = undefined // Invalid.
    
    // Can not check for undefined.
    /-
    if (a == undefined) {
        println("undefined")
    }
    -/
    
    // Nifty does not support variable shadowing. 
    // let a: f32 = 50.f // Invalid.
    
    #noAutoInit {
        let x: int
        let y: float
        let z: string
    }
    
    println(x, y, z) // Valid, but undefined behavior. May warn.
    
    q, r := returnsTwoVars()
    unused, s := returnsTwoVars()
    t, unused := returnsTwoVars()
    
    // u := unused // Invalid.
    
    #[static]
    aa := 12
    
    #[threadStatic]
    bb := 42
}
